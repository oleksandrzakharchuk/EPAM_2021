package class_5.initialization_block;
//Четвертый шаг – это динамические блоки инициализации, которые могут быть альтернативой конструкторам класса для инициализации полей экземпляра. Описываются просто в теле класса, вне любых других блоков. Особенности:
//
//Могут использоваться для разделения блока кода между несколькими конструкторами.
//Компилятор Java вставляет код динамических блоков инициализации в каждый конструктор (в начало его тела) в порядке их описания в теле класса.
//Динамические блоки инициализации имеют следующий синтаксис:
//   { /* Любой код, необходимый для инициализации */ }

//ассмотрим описание класса Car с несколькими конструкторами:
//
//В каждом из конструкторов происходит увеличение на 1 значение поля класса numOfCars (ведется учет созданных объектов этого класса) – изображено в примере.
// В этом случае присутствует дублирование кода.

public class Dynamic_InitializationBlocks {
    //private static int numOfCars;
    //...
    //public void Car() {
    //...
    //  numOfCars++;//дублирование кода
    //}
    //  public void Car(String model) {
    //...
    //  numOfCars++;//дублирование кода

    //Чтобы избежать дублирования, следует вынести общий код из конструкторов в динамический блок инициализации,
    public static class Car {
        private static int numOfCars;

        //...
        {
            numOfCars++;// внесение общего кода в динамический блок инициализации
        }

        public Car() {
            //...
        }

        public void Car(String model) {
            //...
        }
    }
}
//