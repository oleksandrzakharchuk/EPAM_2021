package class_5.initialization_block;
//Третий шаг – это СТАТИЧЕСКИЕ БЛОКИ ИНИЦИАЛИЗАЦИИ. Используются, когда требуется некоторая логика и предполагается, что они будут использоваться только один раз (например, обработка ошибок или циклы для заполнения сложных наборов данных).
//
//Ограничения:
//
//оператор return не может использоваться внутри статических блоков инициализации
//ключевое слово this не может использоваться внутри статических блоков инициализации
//на поле экземпляра нельзя ссылаться из статических блоков инициализации.

import java.util.Arrays;

public class StaticInitializationUnits {
    //Компилятор Java размещает код статического блока инициализации в методе clinit() после инициализации полей класса выражениями.
    // В следующем примере статический блок инициализации используется для инициализации массива символов литерами латинского алфавита (это требуется сделать только один раз, поэтому метод описывать нет необходимости):
    private static char[] alph;
    static {
        alph = new char[26];
        int i = 0;
        for (char c = 'a'; i < alph.length; c++, i++) {
            alph[i] = c;
        }
    }
    public static void main(String[] arg) {
        System.out.print(Arrays.toString(alph));//[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z]
    }//На этом статическая инициализация класса завершается и класс может использоваться для создания объектов.
}
//Необходимо отметить следующие особенности:
//
//Класс может иметь любое количество статических блоков инициализации.
//Они могут появляться в любом месте тела класса.
//Исполнительная система гарантирует, что статические блоки инициализации вызываются в том порядке, в котором они приведены в исходном коде.
//Статический блок инициализации исполняется только один раз, когда класс инициализируется или загружается впервые.
