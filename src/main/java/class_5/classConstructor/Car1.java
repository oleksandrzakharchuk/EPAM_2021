package class_5.classConstructor;
//Конструкторы – это специальные методы, которые инициализируют поля начальными значениями и возвращают объект класса, в котором они определены. Конструкторы принимают данные, которые используют для инициализации объекта.
//
//Конструкторы предназначены для инициализации объекта в процессе его создания. Как правило, конструкторы используются для указания начальных значений полей объекта, определенных в классе, или же для выполнения любых других действий, требующихся для создания полностью сформированного объекта.
//Java автоматически предоставляет конструктор. Поэтому у всех классов имеются конструкторы, независимо от того, определите вы их явно в теле класса или нет. Конструктор инициализирует все поля экземпляра/объекта их значениями по умолчанию:
//
//для большинства типов данных значением по умолчанию является нулевая величина
//для типа boolean — значение false
//для ссылочных типов — значение null.

//признаки характерны для конструкторов:
//имя
//Имя конструктора совпадает с именем класса, включая регистр. По синтаксису конструктор похож на метод без возвращаемого значения.

// возвращаемое значение
//Конструктор не имеет явно указанного типа возвращаемого значения, так как всегда возвращает ссылку своего класса. Если при описании конструктора указать тип возвращаемого значения, то Java воспримет его как метод класса, а не конструктор. Например, void Car(String carModel) { }

//вызов
// Вне класса конструктор вызывается только через оператор new.

public class Car1 {
    private String carModel;

    public Car1(String carModel) {//конструктор для инициализации модели автомобиля. Конструкторы – это специальные методы, определенные в классе. Они инициализируют и возвращают объект класса, в котором определены. У всех классов имеются конструкторы.
        this.carModel = carModel;
    }
    public String getCarModel() {
        return carModel;
    }
}
class DemoConstructor {
    public static void main(String[] arg) {
        Car1 сar1 = new Car1("Audi");
        Car1 сar2 = new Car1("BMW");
        Car1 сar3 = new Car1("Bentley");
        System.out.println(сar1.getCarModel());
        System.out.println(сar2.getCarModel());
        System.out.println(сar3.getCarModel());
    }
}
//Audi
//BMW
//Bentley