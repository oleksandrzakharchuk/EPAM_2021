package class_5;//пакет
//Таким образом, при определении класса нужно объявить его конкретную форму и поведение. Для этого указываются содержащиеся в нем поля и методы оперирования этими полями.

public class СlassDescription {// имя класса

        private String model;// поля
        private int maxSpeed;
        private int year;

        public СlassDescription(String model, int year, int maxSpeed) {
            this.model = model;
            this.year = year;
            this.maxSpeed = maxSpeed;
        }

        public int getMaxSpeed() {//метод
            return maxSpeed;
        }
    }

//пяти основных черт объектно-ориентированного программирования.
// 1->Всё является объектом Объект можно представить себе как швейцарский нож: он является набором различных ножей и "открывашек" (хранение), но в то же самое время им мы можем резать или открывать что-либо (преобразование).

//2->Программа — совокупность объектов, указывающих друг другу что необходимо делать. Для обращения к одному объекту другой объект "посылает ему сообщение". Возможно и "ответное сообщение". Например, программу можно представить как совокупность трех объектов: писателя, ручки и листа бумаги. Писатель "посылает сообщение" ручке, которая, в свою очередь, "посылает сообщение" листу бумаги. В результате мы видим текст (посыл сообщения от листа к писателю).

//3->Каждый объект имеет свою собственную "память", которая хранит его состояние. Объекты могут состоять из других объектов. К примеру, дом – достаточно сложный объект. Он состоит из дверей, комнат, окон, проводки и отопления. Дверь, в свою очередь, может состоять из собственно полотна, ручки, замка и петель. Проводка тоже состоит из проводов, розеток и щитка.

//4->  каждого объекта есть тип. Иногда тип называют еще и классом. Класс (тип) определяет, какие сообщения могут посылать друг другу объекты. Например, аккумуляторная батарея может передавать электролампе ток, а вот импульс или физическое усилие – нет.

//5-> Все объекты одного типа могут получать одинаковые сообщения. К примеру, имеется два объекта: зеленый картонный и прозрачный пластиковый стакан. Оба – разные по форме, цвету и материалу. Но из обоих мы можем пить, если они не пусты. В данном случае стакан — это тип объекта.


//В объектно-ориентированном программировании существует три основных принципа построения классов: инкапсуляция, наследование и полиморфизм.

//        Инкапсуляция – это свойство, позволяющее объединить в классе данные и методы, работающие с ними, и скрыть детали реализации от пользователя.
//
//        Наследование – это свойство, позволяющее создать новый класс на основе уже существующего, при этом характеристики класса-родителя присваиваются классу-потомку.
//         Полиморфизм – это свойство классов, позволяющее использовать объекты классов с одинаковым интерфейсом без информации о конкретном типе и внутренней структуре объекта.

//Поле – это объявление или описание переменной. Класс может содержать любой из следующих видов переменных.

//Локальные переменные ->определяются внутри методов, конструкторов или блоков. Они объявляются и инициализируются в этих конструкциях, а по выходу из них уничтожаются.

//Переменные экземпляра ->определяются в пределах класса, но снаружи любого метода. Они инициализируются при создании объекта класса.
// Эти переменные доступны внутри любого метода экземпляра, конструктора или блока инициализации.

//Переменные класса (статические переменные)-> объявляются в теле класса вне любого метода с помощью ключевого слова static. Они инициализируются при формировании класса и доступны во всех методах, конструкторах и блоках инициализации. Ключевое слово static может стоять перед полем класса. Для всех объектов класса - сколько бы их не было статическое поле является общим и имеет общее значение. Если хотябы один из обектов или просто незавичимо от обектов значение этого  статическое поле будет изменено то всем обектам класса будет доступно ето изменение.
//Статическое поле храниться отдельно от обекта и может существовать и использоваться даже если не существует даже в данной области видимости данного приложения ни одного обекта класса.

