package interfais_7.featuresOfPolymorphicUseOfInterfaces.interfaceInheritance;
//Интерфейс может расширять (наследовать) любое количество других интерфейсов.

//Класс может расширять только один класс и при этом реализовывать множество интерфейсов.
//
//Если в суперклассе и интерфейсе окажутся методы с одинаковой сигнатурой, то реализованный метод интерфейса перекроет видимость унаследованного метода суперкласса.
//Для вызова метода суперкласса необходимо использовать ключевое слово super.

//interface Interface1 {  /*...*/  }
//interface Interface2 {  /*...*/  }

/*public class InterfaceInheritance extends Interface1, Interface2 {  *//*...*//*  } {

}*/

//модификатор доступа
// Все методы интерфейса при переопределении должны иметь модификатор public т.к по умолчанию они определены как общедоступные

//Тело интерфейса
//Интерфейсы могут содержать только неизменяемые поля и абстрактные методи

//Наследование интерфейсов
//интерфейс расширяющий, наследующий другой интерфейс не отвечает за реализацию методов родительского интерфейса(е. к именно классы предоставляют реализацию)

//множественное наследование
//интерфейс может расширять, а класс может реализовать несколько других интерфейсов

// полиморфизм на интерфейсах
//имена интерфейсов можно использовать везде где вы можете использовать любое другое имя типа данных(ссылочной переменной, тип которой интерфейс, может быть назначен любой обект класса, который реализует этот интерфейс)


//Сравнение абстрактных классов и интерфейсов
//Как вы могли заметить, в языке Java интерфейсы и абстрактные классы очень похожи друг на друга. Но несмотря на общую схожесть, между ними существуют различия, особенно в их применении.

//Абстрактный класс                                 Интерфейс
//Описывает состояние и поведение	                Описывает только поведение
//Может содержать поля, которые
// описывают характеристики объекта                 Может содержать только поля, которые                                                    //являются public static final
//Класс наследует только один
// абстрактный класс	                            Класс может реализовать несколько    //                                                 //интерфейсов
//Используется только в тех случаях,
// когда отношения между абстрактным классом
// и конкретным можно выразить отношением is-a	    Используется в тех случаях, когда                                                       //определяет контракт между не                                                          //связанными классами
//Класс-наследник абстрактного класса
// становится частью иерархии и входит
// в семейство похожих объектов	                    Класс, реализующий интерфейсы, просто                                                  //расширяет свою функциональность
                                                   //Интерфейсы могут и не иметь                                                           //объявлений методов.
//                                                //Такие интерфейсы называются
//                                                интерфейсы маркеры.

//https://docs.oracle.com/javase/tutorial/java/IandI/createinterface.html
// в Java интерфейсы представляют собой ссылочный тип, который может содержать:
//
//только неизменяемые поля
//объявления методов (абстрактных методов) и вложенных типов .
//начиная с Java 8 - методы с реализацией (статические и по умолчанию). Если класс утверждает реализацию интерфейса, то все методы, определенные этим интерфейсом, должны появиться в коде класса для успешной его компиляции.

//Классы имплементируют интерфейсы только со словом implements. Интерфейсы могут наследовать другие интерфейсы только с ключевым словом extends.

//Методы интерфейса (которые не были объявлены как default или static) неявно являются абстрактными и открытыми.
// Интерфейсы могут создавать иерархии интерфейсов подобно иерархиям классов.