package Array_4.MetodsArraysClass;
//класс Arrays и его методами:
//        toString(array) —преобразование массива в строку символов
//        deepToString(array) — преобразование многомерного массива в строку символов
//        copyOf(array, length) — копирование массива указанной длины
//        equals(array1, array2) — сравнение массивов
//        deepEquals(array1, array2) — сравнение многомерных массивов
//        sort(array) — расположение элементов массива в порядке не убывания
//        binarySearch(array, element) — определение содержит ли массив значение element: если да, то возвращает его индекс
//        fill(array, element) — заполнение элементов массива значением element.
//Class Arrays

//В библиотеке Java существует множество методов для работы с массивами. Например, ряд методов определен в классах Object и System пакета java.lang. Также существует специальный класс Arrays (пакет java.util), который наиболее часто используется на практике.

//Все методы работают с массивами всех примитивных типов.
//Для использования методов класса Arrays его необходимо включить в программу (импортировать):
//import  java.util.Arrays;
//Для обращения к методу перед его именем необходимо указать имя класса с точкой. Например:
//Arrays.fill(array, 5);

import java.util.Arrays;

public class MethodToString {
//Метод toString
// предназначен для представления массива в виде строки, состоящей из квадратных скобок, внутри которых указываются значения элементов массива через запятую. Данный метод удобно использовать для отображения одномерного массива в консоль.  public static String toString(<тип>[] a)

    public static void main(String[] args) {
        int[] array = {9, 8, 7, 6, 5};
        System.out.println(Arrays.toString(array));//[9, 8, 7, 6, 5]
        //Если попробовать распечатать массив без использования метода toString() класса Arrays, то будет выведено не содержимое массива, а адрес памяти, в котором он хранится.
        System.out.println(array);//[I@4439f31e

        //Метод copyOf
        // предназначен для получения копии переданного массива с указанием его новой длины.
        //
        //Описание:
        //public static <тип>[] copyOf(<тип>[] original, int newLength) {  }

        //Метод copyOf:
        //->возвращает копию переданного массива original указанной длины newLength
        //->если newLength больше исходного массива, то все недостающие элементы заполняются нулевым значением
        //->если newLength меньше исходного массива, то возвращается массив только с первыми newLength элементами.

        int[] newArray2 = Arrays.copyOf(array, 5);//[9, 8, 7, 6, 5] возвращает копию переданного массива original указанной длины newLength
        System.out.println(Arrays.toString(newArray2));

        int[] newArray = Arrays.copyOf(array, 8);
        System.out.println(Arrays.toString(newArray));//[9, 8, 7, 6, 5, 0, 0, 0] три недостающих елемента получили значение 0. если newLength больше исходного массива, то все недостающие элементы заполняются нулевым значением
        int[] newArray1 = Arrays.copyOf(array, 2);
        System.out.println(Arrays.toString(newArray1));//[9, 8] если newLength меньше исходного массива, то возвращается массив только с первыми newLength элементами.

        //Метод equals
        // предназначен для сравнения двух массивов одинакового типа.
        //
        //Описание:
        //public static boolean equals(<тип>[] a, <тип>[] a2) {   }
//Два массива считаются равными (одинаковыми), если оба содержат одинаковое количество элементов, и соответствующие пары элементов массивов равны.

        int[] arr1 = {1,2,3,4,5,6,7,8,9};
        int[] arr2 = {1,2,3,4,5,6,7,8,9};
        int[] arr3 = {1,2,5,5,5,5,5,8,9};
        System.out.println(arr1 == arr2);//false  сравнение ссылок на разные объекты вернет "ложь", даже при равном количестве элементов и их идентичности.
        System.out.println(Arrays.equals(arr1, arr2));//true
        System.out.println(Arrays.equals(arr1, arr3));//false

        //Метод sort
        // предназначен для упорядочивания элементов массива в неубывающей последовательности (элементы с равными значениями располагаются рядом). Время выполнения сортировки зависит от исходной упорядоченности массива в требуемом порядке: чем больше элементов расположены в необходимом порядке, тем быстрее выполняется сортировка.
        //
        //Описание:
       //public static void sort(<тип> a [] ) = {  }
        int intArr[] = {55, 57, 61, 66, 18, 19, 27, 38,10, 55, 15, 39, 51, 18, 83, 95};
        Arrays.sort(intArr);
        System.out.println("The sorted int array is:");
        System.out.println(Arrays.toString(intArr));//The sorted int array is:
//[10, 15, 18, 18, 19, 27, 38, 39, 51, 55, 55, 57, 61, 66, 83, 95]

        //Метод binarySearch
        // предназначен для поиска значения в массиве. При этом используется алгоритм бинарного поиска. Если искомых значений несколько, то вы получите информацию о расположении только одного значения. Для корректной работы этого метода необходимо, чтобы массив был упорядоченным.
//Описание:
//public static int binarySearch(<тип>[] arr, <тип> key) {   }
        //Данный метод:
        //
        //возвращает индекс, по которому элемент со значением key находится в массиве arr
        //если такой элемент отсутствует, то возвращается отрицательное значение - признак того, что такого элемента нет.
        int intArr4[] = {10, 15, 18, 18, 19, 27, 38, 39, 51, 55, 55, 57, 61, 66, 83, 95};
        int searchVal = 55;
        int retVal = Arrays.binarySearch(intArr4, searchVal);
        System.out.println("The index of element 55 is : " + retVal);//The index of element 55 is : 9
        //Алгоритм бинарного поиска
        //
        //Находится индекс среднего элемента между индексами левой и правой границы массива.
        //Полученный элемент проверяется на равенство искомому:
        //если равен, то возвращается его индекс
        //если не равен, то поиск продолжается в одной из половинок.
        //Оценивается искомое значение и элемент по найденному индексу:
        //если искомый элемент имеет значение меньше, то правая граница переопределяется в индекс, предшествующий среднему
        //если искомый элемент имеет значение больше, то левая граница переопределяется в индекс, следующий за средним.
        //Поиск продолжается, начиная с п.1, и до тех пор, пока элемент не будет найден или пока левая и правая граница не пересекутся. В последнем случае возвращается отрицательное значение (поиск не успешен).

        //Метод fill
        // предназначен для заполнения массива указанным значением. Такое значение могут получить либо все элементы, либо часть массива. Метод используется для заполнения массива заданным значением.
        //
        //Описание:
       //public static void fill(<тип>[] arr, <тип> value) {   }
        //Данный метод не имеет возвращаемого значения. Все элементы массива получают значение value.
        int[] array5 = new int[7];
        Arrays.fill(array5, -1);
        System.out.println(Arrays.toString(array5));//[-1, -1, -1, -1, -1, -1, -1]

    }
}
