package objectCloning_7.CloningAnObjectByACopyDesigner;
//Клонирование объекта конструктором копирования означает, что объект создается на базе уже существующего.


public class ClassA {
    //Опишем класс ClassA, в котором определим два поля: одно примитивного типа, другое ссылочного.
    private int field1 = 100;
    private String field2 = "Hello";

//Также определим геттеры и два конструктора – по умолчанию и с параметром.

    public  int getField1() {
        return field1;
    }
    //Конструктор с параметром принимает объекты своего типа. В теле этого конструктора мы инициализируем все поля создаваемого объекта копиями полей переданного. Если поле примитивного типа, то просто копируем его значение. Если поле ссылочного типа, то сначала делаем его копию.

    public String getField2() {//В данном случае используем конструктор копирования типа String.
        return field2;
    }
    public ClassA() {}
    public ClassA(ClassA other) {

        this.field1 = other.getField1();//получить значение поля переданного обекта и копировать его в текущий
        this.field2 = new String(other.getField2());// конструктор копирования для ссылочного типа
    }
}
//О реализации инициализации полей полностью должен позаботиться разработчик класса.

//Клонирование используется, когда необходимо предоставить более широкий доступ к объекту, но в то же время важно, чтобы исходный объект не подвергался изменениям.
//Интерфейс Cloneable помечает класс как доступный для клонирования. Без этого интерфейса попытка клонировать объект класса приведет к генерации исключения.
//Поверхностное клонирование уже реализовано Java, а глубокое клонирование реализует разработчик.