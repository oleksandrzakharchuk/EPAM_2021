package oop_6.encapsulation.pablic;
//ключевых принципов ООП — инкапсуляцией.
//
// Инкапсуляция — это объединение данных и методов работы с этими данными в одной упаковке ("капсуле") с возможностью их сокрытия от внешнего мира (других объектов).
//
//Как вы уже знаете, данные, характеризующие объект, называются полями экземпляра. А операции, которые выполняются над этими данными — методами экземпляра. В конкретном объекте (экземпляре класса) эти поля имеют определенные значения. Множество значений полей называется текущим состоянием объекта. Применение любого метода к объекту может изменить его состояние.
//
// Что дает инкапсуляция? Основной момент — это запрет прямого доступа к полям экземпляра данного класса из других классов. Различные части программы, а также внешние программы могут получать и изменять данные объекта только с помощью методов этого объекта. Отсюда следует, что в классе можно изменить способ хранения данных, сохранив методы их обработки. При этом другие объекты смогут взаимодействовать с объектами такого класса так же, как и до изменений.
//
//
//Практически это означает наличие в описании класса двух частей — интерфейса и реализации.

// Под интерфейсом понимается все, что касается взаимодействия данного объекта с любыми другими объектами.
//
// Под реализацией понимается сокрытие от других объектов всех деталей, не имеющих отношения к процессу взаимодействия объектов.
//
// За реализацию принципа инкапсуляции в Java отвечают модификаторы доступа – ключевые слова, регулирующие уровень доступа к данным (классам, полям и методам в классе).
//
// Модификаторы доступа определяют, как другие классы могут использовать этот класс, поле и метод. Все модификаторы делятся на 2 группы:
//
//Модификаторы уровня доступа (Access Modifiers).

//Модификаторы, специфицирующие использование (Non-Access Modifiers).
//
// Существует два уровня контроля доступа: верхний уровень и уровень членов.
//К верхнему уровню относятся:
//открытый (public)
//пакетный (package-private).

//К уровню членов относятся:
//открытый (public)
//закрытый (private)
//защищенный (protected)
//пакетный (package-private).

//Модификатор public
// может использоваться перед описанием класса, метода, конструктора и поля:
//
//для класса он определяет доступ из любой Java-программы
//для члена класса – доступ извне через объект, имя класса или из любого метода этого класса.
//[![Access control](img.png)]

public class Car {
    public int speed;
    //...
    public int getSpeed() {
        return speed;
    }
    //...
}


