package oop_6.inheritance.konstruktors;

public class Student extends Person {
    private int yearOfStudy;
// по умолчанию компилятов в этот конструкторподставит сюда super();
    public Student(int yearOfStudy) {
        //this(1, 1);// ошибка
        this.yearOfStudy = yearOfStudy;

    }


    // если же для инициализации поля будет использован какой либо другой конструктор
    //конструктор инициализирует два поля
    public Student(int id, int yearOfStudy) {
        this(yearOfStudy);
        //this.yearOfStudy = yearOfStudy;//самостоятельно инициализируем поле yearOfStudy
        //super(id, name);//обрааемся к конструктору и пердаем id, name. В данном случае если мы хотим обращаться к данному конструктору, его запись обязательна потому что по умолчанию будет подставлен конструктор без параметров.  super - два быть не может. Может быть только один единственный

    }

    //public Student(int id, int yearOfStudy) {

        //super(id); вместл  super (id) написать this  и вызвать один из конструкторов-например yearOfStudy
       // this(yearOfStudy);//этот конструктор к конструктору суперкласса не обращаеться. Он обращаеться к своему конструктору а тот в свою очередь обращаеться к конструктору суперкласса this так как у них отсутствует обращение к супер классу и это будет ошибка компиляции.
        // все конструкторы не могут иметь обращения this.
        //обращение к конструктору суперкласса как минимум должно быть одно

        //this.yearOfStudy = yearOfStudy;
    }
//}
// конструктор не может обявляться со спецификатором final, abstract, static, native, synchronize, кроме спецификаторов видимости - это ни на что не повлияет.
//