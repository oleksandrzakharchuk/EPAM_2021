package oop_6.inheritance.person;
//Наследование — это свойство, позволяющее создать новый класс на основе существующего с частичным или полным заимствованием характеристик. Это позволяет упорядочить классы в иерархии, которая представляет отношения типа "is-a" (является типом/является разновидностью). Например, "Автомобиль" является разновидностью "Транспортного средства".
//
//В языке Java для классов, находящихся в одной ветке наследования, введены термины подкласс и суперкласс.

//Подкласс
//Подкласс — это класс, который наследуется от другого класса и расширяет его. Подкласс так же может называться производным или дочерним классом.

//Суперкласс — это класс, от которого происходит наследование. Также может называться базовым или родительским классом.

//Подкласс полностью соответствует спецификации суперкласса. Однако подкласс может иметь дополнительную функциональность с точки зрения интерфейса взаимодействия с объектами: каждый подкласс полностью поддерживает интерфейс суперкласса. Обратное неверно.

//Рассмотрим пример.
//Суперкласс автомобиль имеет свойство: тип кузова.
//
//Подкласс электромобиль имеет дополнительные свойства: время заряда, емкость аккумулятора.
//
//В противовес наследованию существует другой вид отношений между классами – композиция, когда один класс включает в себя объекты других классов. Таким образом описываются сложные объекты. Такое отношение определяется как "has-a" (имеет в своем составе).

//Исходя из того, что наследник получает от родителя набор характеристик можно сказать, что достоинство наследования — повторное использование.

//После того, как поведение (методы) определяется в суперклассе, это поведение автоматически наследуется всеми подклассами. Таким образом, вы пишете метод всего один раз, и он может быть использован всеми подклассами.
//
//Например, если в классе Car определен метод move(), то он автоматически наследуется и подклассом ElectricCar.

//После того, как набор данных (поля/характеристики) определен в суперклассе, этот же набор свойств наследуется всеми подклассами. Класс и его дочерние классы разделяют общий набор характеристик.
//
//Например, если в классе Car определено поле weight, то оно наследуется и подклассом ElectricCar.

//Подклассу нужно только реализовать различия между собой и суперклассом.
//
//Например, для подкласса ElectricCar необходимо ввести поле chargeTime.

//<модификаторы> class <имя подкласса> extends(ключевое слово, которое определяет, что описываемый класс расширяет другой класс) <имя суперкласса> {
//    тело_ подкласса
//}

//Существует два типа наследования, которые определяются количеством родительских классов — одиночное(один родительский класс) и множественное(два и больше родительских класса).

//Для того чтобы избежать проблем наследования одних и тех же полей от нескольких классов, в Java применяется только одиночное наследование.


public class Student extends Person {

   // private  int id;
   // private String name = "";
    private  int yearOfStudy;//следует избегать наследования у которых не появляються новые поля или не переопределяються методы

}
//правила наследования элементов суперкласса, которые определяются правами доступа к ним.
//Подкласс наследует public элементы суперкласса, то есть они переходят в область видимости подкласса.
