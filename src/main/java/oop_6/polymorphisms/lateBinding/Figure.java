package oop_6.polymorphisms.lateBinding;
//Полиморфизм можно отличить по тому, когда выбрана реализация:
//
//статически — во время компиляции
//динамически — во время выполнения.
//В Java механизм выбора реализации — определения вызываемого метода — называется связыванием, и существует два типа связывания методов.

public class Figure {
//Динамическое - позднее связывание (late binding)
    //Происходит во время исполнения программы. Компилятор не имеет возможности определить, какой вариант метода с одинаковым названием следует вызвать:
    //проявляется на вызове переопределенного метода подкласса через ссылку на суперкласс
    //основывается на типе объекта, а не на типе ссылки.
//Динамический полиморфизм более гибок, но выполняется медленнее – так как динамически связанная библиотека может работать с объектами, не зная их полного типа.
    //Статический полиморфизм выполняется быстрее, так как нет динамических накладных расходов, но требуется дополнительная поддержка от компилятора.
    //В примере описываются три класса Figure (как суперкласс), Rectangle и Triangle (как подклассы).
    //В классе Figure описаны два поля для хранения размеров фигур (dim1 и dim2), а также определен метод вычисления площади фигуры area().
    //Для класса Figure неизвестна форма фигуры, поэтому этот метод возвращает 0.
    //Подклассы Rectangle и Triangle переопределяют метод area() для вычисления свой площади. Конструкторы этих классов передают свои размерности для хранения в поля dim1 и dim2: Rectangle — ширину и высоту, Triangle – длину основания и высоту.
    //Класс FindAreas создает три объекта. По одному для классов Figure, Rectangle и Triangle. А также создает ссылку типа Figure – figref. Эта ссылка поочередно связывается с созданными объектами, и на ней вызывается метод area().
protected double dim1;
    protected double dim2;
    Figure(double dim1, double dim2) {
        this.dim1 = dim1;
        this.dim2 = dim2;
    }
    public double area() {
        System.out.print("Площадь фигуры не определена ");
        return 0.0;
    }
}

//Для класса Figure неизвестна форма фигуры, поэтому этот метод возвращает 0.