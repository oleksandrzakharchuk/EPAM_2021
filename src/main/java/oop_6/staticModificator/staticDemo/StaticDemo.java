package oop_6.staticModificator.staticDemo;
//Java предоставляет ряд модификаторов не только для доступа, но и для реализации других функциональных возможностей. Например, модификаторы, специфицирующие использование — static и final.

//Модификатор static применяется для создания методов и переменных (полей), принадлежащих классу, а не объекту.

//Поле данных или метод, объявленные в классе как static, являются общими для всех объектов этого класса и называются полем класса или методом класса. Другими словами, они принадлежат классу, а не экземпляру класса.

//У статических полей (полей класса), по сравнению с полями экземпляра, есть ряд особенностей:Могут быть использованы без создания экземпляра класса.Если один объект изменит значение такого поля, то это изменение увидят все объекты.

//Статические методы (методы класса) используются для работы со статическими полями класса или только с данными, полученными в параметрах. Как и поля класса, статические методы имеют ряд особенностей:
//Статические методы не полиморфны, то есть версия метода для исполнения определяется на этапе компиляции.
//Статические методы могут быть вызваны из методов экземпляра напрямую так же, как и статические поля класса.
//Статические методы не привязаны к объекту класса и потому не могут использовать ключевые слова this или super для обращения к конкретному объекту.
//Статические методы не могут напрямую обращаться к полям и методам экземпляра, им нужно создавать или получать ссылку на объект для обращения.

//Для обращения к статическим полям и методам достаточно указать перед ними имя класса, в котором они определены. Конечно, статический метод можно вызывать и через ссылку на объект, так как любой объект класса имеет доступ к статическому контексту класса. Однако такой вызов будет логически не корректным, затруднит понимание кода и приведет к появлению соответствующего предупреждения, хотя и не вызовет ошибки компиляции.

//Модификатор final используется для определения окончательной реализации классов и методов, а также неизменяемости переменных и полей.


public class StaticDemo {
//В примере описан класс StaticDemo. В нем определены два поля класса a, b и метод класса callme(). В методе main() класса Demo1 показано правильное обращение к статическим элементам класса StaticDemo: без создания объекта, в котором нет необходимости для взаимодействия с полями и методом класса StaticDemo.

    static int a = 42;// поля класса
    static int b = 99;
    static void callme() {//метод класса
        System.out.println("a = " + a);
    }
}
